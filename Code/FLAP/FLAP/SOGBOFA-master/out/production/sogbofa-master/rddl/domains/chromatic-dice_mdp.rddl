domain chromatic-dice_mdp {
    types {
        die : object;
    };

    pvariables {
        SCORE_FIVE_OF_A_KIND : { non-fluent, int, default = 50 };
        SCORE_LARGE_STRAIGHT : { non-fluent, int, default = 40 };
        SCORE_SMALL_STRAIGHT : { non-fluent, int, default = 30 };
        SCORE_FULL_HOUSE : { non-fluent, int, default = 25 };
        SCORE_COLOR_FULL_HOUSE : { non-fluent, int, default = 20 };
        SCORE_RAINBOW : { non-fluent, int, default = 35 };
        BONUS_VALUE_PART_1 : { non-fluent, int, default = 45 };
        BONUS_VALUE_PART_2 : { non-fluent, int, default = 45 };
        BONUS_VALUE_PART_3 : { non-fluent, int, default = 45 };
        BONUS_VALUE_PART_4 : { non-fluent, int, default = 45 };
        BONUS_VALUE_PART_5 : { non-fluent, int, default = 45 };
        BONUS_VALUE_PART_6 : { non-fluent, int, default = 45 };
        BONUS_COLOR_PART_1 : { non-fluent, int, default = 40 };
        BONUS_COLOR_PART_2 : { non-fluent, int, default = 40 };
        BONUS_COLOR_PART_3 : { non-fluent, int, default = 40 };
        BONUS_COLOR_PART_4 : { non-fluent, int, default = 40 };
        BONUS_COLOR_PART_5 : { non-fluent, int, default = 40 };
        BONUS_COLOR_PART_6 : { non-fluent, int, default = 40 };
        BONUS_PROB_VALUE_PART_1 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_VALUE_PART_2 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_VALUE_PART_3 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_VALUE_PART_4 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_VALUE_PART_5 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_VALUE_PART_6 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_1 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_2 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_3 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_4 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_5 : { non-fluent, real, default = 0.0 };
        BONUS_PROB_COLOR_PART_6 : { non-fluent, real, default = 0.0 };
        VALUE_PROB_1 : { non-fluent, real, default = 0.166666667 };
        VALUE_PROB_2 : { non-fluent, real, default = 0.166666667 };
        VALUE_PROB_3 : { non-fluent, real, default = 0.166666667 };
        VALUE_PROB_4 : { non-fluent, real, default = 0.166666667 };
        VALUE_PROB_5 : { non-fluent, real, default = 0.166666667 };
        VALUE_PROB_6 : { non-fluent, real, default = 0.166666667 };
        COLOR_PROB_red : { non-fluent, real, default = 0.0 };
        COLOR_PROB_green : { non-fluent, real, default = 0.0 };
        COLOR_PROB_blue : { non-fluent, real, default = 0.0 };
        COLOR_PROB_yellow : { non-fluent, real, default = 0.0 };
        COLOR_PROB_purple : { non-fluent, real, default = 0.0 };

        die-value_is_1_interm(die) : { interm-fluent, bool, level = 1 };
        die-value_is_2_interm(die) : { interm-fluent, bool, level = 2 };
        die-value_is_3_interm(die) : { interm-fluent, bool, level = 3 };
        die-value_is_4_interm(die) : { interm-fluent, bool, level = 4 };
        die-value_is_5_interm(die) : { interm-fluent, bool, level = 5 };
        die-value_is_6_interm(die) : { interm-fluent, bool, level = 6 };
        die-color_is_red_interm(die) : { interm-fluent, bool, level = 1 };
        die-color_is_green_interm(die) : { interm-fluent, bool, level = 2 };
        die-color_is_blue_interm(die) : { interm-fluent, bool, level = 3 };
        die-color_is_yellow_interm(die) : { interm-fluent, bool, level = 4 };
        die-color_is_purple_interm(die) : { interm-fluent, bool, level = 5 };

        die-value_is_1(die) : { state-fluent, bool, default = true };
        die-value_is_2(die) : { state-fluent, bool, default = false };
        die-value_is_3(die) : { state-fluent, bool, default = false };
        die-value_is_4(die) : { state-fluent, bool, default = false };
        die-value_is_5(die) : { state-fluent, bool, default = false };
        die-value_is_6(die) : { state-fluent, bool, default = false };
        die-color_is_red(die) : { state-fluent, bool, default = false };
        die-color_is_green(die) : { state-fluent, bool, default = false };
        die-color_is_blue(die) : { state-fluent, bool, default = true };
        die-color_is_yellow(die) : { state-fluent, bool, default = false };
        die-color_is_purple(die) : { state-fluent, bool, default = false };
        current-phase_is_roll1 : { state-fluent, bool, default = true };
        current-phase_is_roll2 : { state-fluent, bool, default = false };
        current-phase_is_roll3 : { state-fluent, bool, default = false };
        current-phase_is_assign : { state-fluent, bool, default = false };
        current-phase_is_receive-boni : { state-fluent, bool, default = false };
        current-phase_is_finish : { state-fluent, bool, default = false };
        taken_ones : { state-fluent, bool, default = false };
        taken_twos : { state-fluent, bool, default = false };
        taken_threes : { state-fluent, bool, default = false };
        taken_fours : { state-fluent, bool, default = false };
        taken_fives : { state-fluent, bool, default = false };
        taken_sixes : { state-fluent, bool, default = false };
        taken_reds : { state-fluent, bool, default = false };
        taken_greens : { state-fluent, bool, default = false };
        taken_yellows : { state-fluent, bool, default = false };
        taken_blues : { state-fluent, bool, default = false };
        taken_purples : { state-fluent, bool, default = false };
        taken_two-pairs : { state-fluent, bool, default = false };
        taken_three-of-a-kind : { state-fluent, bool, default = false };
        taken_four-of-a-kind : { state-fluent, bool, default = false };
        taken_full-house : { state-fluent, bool, default = false };
        taken_small-straight : { state-fluent, bool, default = false };
        taken_large-straight : { state-fluent, bool, default = false };
        taken_chance : { state-fluent, bool, default = false };
        taken_five-of-a-kind : { state-fluent, bool, default = false };
        taken_three-of-a-color : { state-fluent, bool, default = false };
        taken_four-of-a-color : { state-fluent, bool, default = false };
        taken_color-full-house : { state-fluent, bool, default = false };
        taken_flush : { state-fluent, bool, default = false };
        taken_rainbow : { state-fluent, bool, default = false };
        bonus-level-value-part_is_1 : { state-fluent, bool, default = false };
        bonus-level-value-part_is_2 : { state-fluent, bool, default = false };
        bonus-level-value-part_is_3 : { state-fluent, bool, default = false };
        bonus-level-value-part_is_4 : { state-fluent, bool, default = true };
        bonus-level-value-part_is_5 : { state-fluent, bool, default = false };
        bonus-level-value-part_is_6 : { state-fluent, bool, default = false };
        bonus-level-color-part_is_1 : { state-fluent, bool, default = false };
        bonus-level-color-part_is_2 : { state-fluent, bool, default = false };
        bonus-level-color-part_is_3 : { state-fluent, bool, default = false };
        bonus-level-color-part_is_4 : { state-fluent, bool, default = true };
        bonus-level-color-part_is_5 : { state-fluent, bool, default = false };
        bonus-level-color-part_is_6 : { state-fluent, bool, default = false };
        receive-value-bonus : { state-fluent, bool, default = false };
        receive-color-bonus : { state-fluent, bool, default = false };

        roll(die) : { action-fluent, bool, default = false };
        assign-to_ones : { action-fluent, bool, default = false };
        assign-to_twos : { action-fluent, bool, default = false };
        assign-to_threes : { action-fluent, bool, default = false };
        assign-to_fours : { action-fluent, bool, default = false };
        assign-to_fives : { action-fluent, bool, default = false };
        assign-to_sixes : { action-fluent, bool, default = false };
        assign-to_reds : { action-fluent, bool, default = false };
        assign-to_greens : { action-fluent, bool, default = false };
        assign-to_yellows : { action-fluent, bool, default = false };
        assign-to_blues : { action-fluent, bool, default = false };
        assign-to_purples : { action-fluent, bool, default = false };
        assign-to_two-pairs : { action-fluent, bool, default = false };
        assign-to_three-of-a-kind : { action-fluent, bool, default = false };
        assign-to_four-of-a-kind : { action-fluent, bool, default = false };
        assign-to_full-house : { action-fluent, bool, default = false };
        assign-to_small-straight : { action-fluent, bool, default = false };
        assign-to_large-straight : { action-fluent, bool, default = false };
        assign-to_chance : { action-fluent, bool, default = false };
        assign-to_five-of-a-kind : { action-fluent, bool, default = false };
        assign-to_three-of-a-color : { action-fluent, bool, default = false };
        assign-to_four-of-a-color : { action-fluent, bool, default = false };
        assign-to_color-full-house : { action-fluent, bool, default = false };
        assign-to_flush : { action-fluent, bool, default = false };
        assign-to_rainbow : { action-fluent, bool, default = false };
    };

    cpfs {
        die-value_is_1_interm(?d) = if ( roll(?d) ) then ( Bernoulli ( VALUE_PROB_1 ) ) else die-value_is_1(?d);

        die-value_is_2_interm(?d) = if ( roll(?d) ) then ( ~die-value_is_1_interm( ?d ) & Bernoulli ( ( VALUE_PROB_2 ) / ( 1.0 - ( VALUE_PROB_1 ) ) ) ) else die-value_is_2(?d);

        die-value_is_3_interm(?d) = if ( roll(?d) ) then (~die-value_is_1_interm( ?d ) & ~die-value_is_2_interm( ?d ) & Bernoulli ( ( VALUE_PROB_3 ) / ( 1.0 - ( VALUE_PROB_1 ) - ( VALUE_PROB_2 ) ) ) ) else  die-value_is_3(?d);

        die-value_is_4_interm(?d) = if ( roll(?d) ) then (~die-value_is_1_interm( ?d ) & ~die-value_is_2_interm( ?d ) & ~die-value_is_3_interm( ?d ) & Bernoulli ( ( VALUE_PROB_4 ) / ( 1.0 - ( VALUE_PROB_1 ) - ( VALUE_PROB_2 ) - ( VALUE_PROB_3 ) ) ) ) else  die-value_is_4(?d);

        die-value_is_5_interm(?d) = if ( roll(?d) ) then ( ~die-value_is_1_interm( ?d ) & ~die-value_is_2_interm( ?d ) & ~die-value_is_3_interm( ?d ) & ~die-value_is_4_interm( ?d ) & Bernoulli ( ( VALUE_PROB_5 ) / ( 1.0 - ( VALUE_PROB_1 ) - ( VALUE_PROB_2 ) - ( VALUE_PROB_3 ) - ( VALUE_PROB_4 ) ) ) ) else  die-value_is_5(?d);

        die-value_is_6_interm(?d) = if ( roll(?d) ) then (~die-value_is_1_interm( ?d ) & ~die-value_is_2_interm( ?d ) & ~die-value_is_3_interm( ?d ) & ~die-value_is_4_interm( ?d ) & ~die-value_is_5_interm( ?d ) & Bernoulli ( ( VALUE_PROB_6 ) / ( 1.0 - ( VALUE_PROB_1 ) - ( VALUE_PROB_2 ) - ( VALUE_PROB_3 ) - ( VALUE_PROB_4 ) - ( VALUE_PROB_5 ) ) ) ) else  die-value_is_6(?d);

        die-color_is_red_interm(?d) = if ( roll(?d) ) then ( Bernoulli ( COLOR_PROB_red ) ) else die-color_is_red(?d);

        die-color_is_green_interm(?d) = if ( roll(?d) ) then ( ~die-color_is_red_interm( ?d ) & Bernoulli ( ( COLOR_PROB_green ) / ( 1.0 - ( COLOR_PROB_red ) ) ) ) else die-color_is_green(?d);

        die-color_is_blue_interm(?d) = if ( roll(?d) ) then ( ~die-color_is_red_interm( ?d ) & ~die-color_is_green_interm( ?d ) & Bernoulli ( ( COLOR_PROB_blue ) / ( 1.0 - ( COLOR_PROB_red ) - ( COLOR_PROB_green ) ) ) ) else die-color_is_blue(?d);

        die-color_is_yellow_interm(?d) = if ( roll(?d) ) then ( ~die-color_is_red_interm( ?d ) & ~die-color_is_green_interm( ?d ) & ~die-color_is_blue_interm( ?d ) & Bernoulli ( ( COLOR_PROB_yellow ) / ( 1.0 - ( COLOR_PROB_red ) - ( COLOR_PROB_green ) - ( COLOR_PROB_blue ) ) ) ) else die-color_is_yellow(?d);

        die-color_is_purple_interm(?d) = if ( roll(?d) ) then ( ~die-color_is_red_interm( ?d ) & ~die-color_is_green_interm( ?d ) & ~die-color_is_blue_interm( ?d ) & ~die-color_is_yellow_interm( ?d ) & Bernoulli ( ( COLOR_PROB_purple ) / ( 1.0 - ( COLOR_PROB_red ) - ( COLOR_PROB_green ) - ( COLOR_PROB_blue ) - ( COLOR_PROB_yellow ) ) ) ) else die-color_is_purple(?d);


        die-value_is_1'(?d) = die-value_is_1_interm( ?d );

        die-value_is_2'(?d) = die-value_is_2_interm( ?d );

        die-value_is_3'(?d) = die-value_is_3_interm( ?d );

        die-value_is_4'(?d) = die-value_is_4_interm( ?d );

        die-value_is_5'(?d) = die-value_is_5_interm( ?d );

        die-value_is_6'(?d) = die-value_is_6_interm( ?d );

        die-color_is_red'(?d) = die-color_is_red_interm( ?d );

        die-color_is_green'(?d) = die-color_is_green_interm( ?d );

        die-color_is_blue'(?d) = die-color_is_blue_interm( ?d );

        die-color_is_yellow'(?d) = die-color_is_yellow_interm( ?d );

        die-color_is_purple'(?d) = die-color_is_purple_interm( ?d );

        current-phase_is_roll1' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then false else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then false else if ( current-phase_is_roll1 ) then false else if ( current-phase_is_roll2 ) then false else if ( current-phase_is_roll3 ) then false else true;

        current-phase_is_roll2' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then false else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then false else if ( current-phase_is_roll1 ) then true else if ( current-phase_is_roll2 ) then false else if ( current-phase_is_roll3 ) then false else false;

        current-phase_is_roll3' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then false else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then false else if ( current-phase_is_roll1 ) then false else if ( current-phase_is_roll2 ) then true else if ( current-phase_is_roll3 ) then false else false;

        current-phase_is_assign' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then false else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then false else if ( current-phase_is_roll1 ) then false else if ( current-phase_is_roll2 ) then false else if ( current-phase_is_roll3 ) then true else false;

        current-phase_is_receive-boni' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then true else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then false else if ( current-phase_is_roll1 ) then false else if ( current-phase_is_roll2 ) then false else if ( current-phase_is_roll3 ) then false else false;

        current-phase_is_finish' = if ( ( ( ( taken_ones | assign-to_ones ) & ( taken_twos | assign-to_twos ) & ( taken_threes | assign-to_threes ) & ( taken_fours | assign-to_fours ) & ( taken_fives | assign-to_fives ) & ( taken_sixes | assign-to_sixes ) & ( taken_reds | assign-to_reds ) & ( taken_greens | assign-to_greens ) & ( taken_yellows | assign-to_yellows ) & ( taken_blues | assign-to_blues ) & ( taken_purples | assign-to_purples ) & ( taken_two-pairs | assign-to_two-pairs ) & ( taken_three-of-a-kind | assign-to_three-of-a-kind ) & ( taken_four-of-a-kind | assign-to_four-of-a-kind ) & ( taken_full-house | assign-to_full-house ) & ( taken_small-straight | assign-to_small-straight ) & ( taken_large-straight | assign-to_large-straight ) & ( taken_chance | assign-to_chance ) & ( taken_five-of-a-kind | assign-to_five-of-a-kind ) & ( taken_three-of-a-color | assign-to_three-of-a-color ) & ( taken_four-of-a-color | assign-to_four-of-a-color ) & ( taken_color-full-house | assign-to_color-full-house ) & ( taken_flush | assign-to_flush ) & ( taken_rainbow | assign-to_rainbow ) ) ) & ( ~current-phase_is_receive-boni ) ) then false else if ( ( ( taken_ones ) & ( taken_twos ) & ( taken_threes ) & ( taken_fours ) & ( taken_fives ) & ( taken_sixes ) & ( taken_reds ) & ( taken_greens ) & ( taken_yellows ) & ( taken_blues ) & ( taken_purples ) & ( taken_two-pairs ) & ( taken_three-of-a-kind ) & ( taken_four-of-a-kind ) & ( taken_full-house ) & ( taken_small-straight ) & ( taken_large-straight ) & ( taken_chance ) & ( taken_five-of-a-kind ) & ( taken_three-of-a-color ) & ( taken_four-of-a-color ) & ( taken_color-full-house ) & ( taken_flush ) & ( taken_rainbow ) ) ) then true else if ( current-phase_is_roll1 ) then false else if ( current-phase_is_roll2 ) then false else if ( current-phase_is_roll3 ) then false else false;

        taken_ones' = taken_ones | assign-to_ones;

        taken_twos' = taken_twos | assign-to_twos;

        taken_threes' = taken_threes | assign-to_threes;

        taken_fours' = taken_fours | assign-to_fours;

        taken_fives' = taken_fives | assign-to_fives;

        taken_sixes' = taken_sixes | assign-to_sixes;

        taken_reds' = taken_reds | assign-to_reds;

        taken_greens' = taken_greens | assign-to_greens;

        taken_yellows' = taken_yellows | assign-to_yellows;

        taken_blues' = taken_blues | assign-to_blues;

        taken_purples' = taken_purples | assign-to_purples;

        taken_two-pairs' = taken_two-pairs | assign-to_two-pairs;

        taken_three-of-a-kind' = taken_three-of-a-kind | assign-to_three-of-a-kind;

        taken_four-of-a-kind' = taken_four-of-a-kind | assign-to_four-of-a-kind;

        taken_full-house' = taken_full-house | assign-to_full-house;

        taken_small-straight' = taken_small-straight | assign-to_small-straight;

        taken_large-straight' = taken_large-straight | assign-to_large-straight;

        taken_chance' = taken_chance | assign-to_chance;

        taken_five-of-a-kind' = taken_five-of-a-kind | assign-to_five-of-a-kind;

        taken_three-of-a-color' = taken_three-of-a-color | assign-to_three-of-a-color;

        taken_four-of-a-color' = taken_four-of-a-color | assign-to_four-of-a-color;

        taken_color-full-house' = taken_color-full-house | assign-to_color-full-house;

        taken_flush' = taken_flush | assign-to_flush;

        taken_rainbow' = taken_rainbow | assign-to_rainbow;

        bonus-level-value-part_is_1' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then true else if ( bonus-level-value-part_is_4 ) then true else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then true else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else false ) else ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false );

        bonus-level-value-part_is_2' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then true else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then true else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then true else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else false ) else ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false );

        bonus-level-value-part_is_3' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else true ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then true else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then true else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then true else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else false ) else ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then true else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false );

        bonus-level-value-part_is_4' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else true ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then true else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then true else if ( bonus-level-value-part_is_4 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then true else if ( bonus-level-value-part_is_3 ) then false else false ) else ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then true else if ( bonus-level-value-part_is_5 ) then false else false );

        bonus-level-value-part_is_5' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else true ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then true else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then true else false ) else ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then true else false );

        bonus-level-value-part_is_6' = if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else false ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else true ) else if ( ( assign-to_ones & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_twos & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_threes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fours & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_fives & forall_{?d : die} [~ die-value_is_1( ?d ) ]) | ( assign-to_sixes & forall_{?d : die} [~ die-value_is_1( ?d ) ]) ) then ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else true ) else ( if ( bonus-level-value-part_is_1 ) then false else if ( bonus-level-value-part_is_2 ) then false else if ( bonus-level-value-part_is_3 ) then false else if ( bonus-level-value-part_is_4 ) then false else if ( bonus-level-value-part_is_5 ) then false else true );

        bonus-level-color-part_is_1' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then true else if ( bonus-level-color-part_is_4 ) then true else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then true else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else false ) else ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false );

        bonus-level-color-part_is_2' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then true else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then true else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then true else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else false ) else ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false );

        bonus-level-color-part_is_3' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else true ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then true else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then true else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then true else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else false ) else ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then true else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false );

        bonus-level-color-part_is_4' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else true ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then true else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then true else if ( bonus-level-color-part_is_4 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then true else if ( bonus-level-color-part_is_3 ) then false else false ) else ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then true else if ( bonus-level-color-part_is_5 ) then false else false );

        bonus-level-color-part_is_5' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else true ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then true else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then true else false ) else ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then true else false );

        bonus-level-color-part_is_6' = if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else false ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else true ) else if ( ( assign-to_reds & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_greens & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_blues & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_yellows & forall_{?d : die} [~ die-color_is_red( ?d ) ]) | ( assign-to_purples & forall_{?d : die} [~ die-color_is_red( ?d ) ]) ) then ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else true ) else ( if ( bonus-level-color-part_is_1 ) then false else if ( bonus-level-color-part_is_2 ) then false else if ( bonus-level-color-part_is_3 ) then false else if ( bonus-level-color-part_is_4 ) then false else if ( bonus-level-color-part_is_5 ) then false else true );

        receive-value-bonus' = if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_1 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_1 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_2 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_2 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_3 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_3 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_4 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_4 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_5 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_5 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-value-part_is_6 ) ) then Bernoulli ( BONUS_PROB_VALUE_PART_6 ) else false;

        receive-color-bonus' = if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_1 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_1 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_2 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_2 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_3 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_3 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_4 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_4 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_5 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_5 ) else if ( ( current-phase_is_receive-boni ) & ( bonus-level-color-part_is_6 ) ) then Bernoulli ( BONUS_PROB_COLOR_PART_6 ) else false;

    };

    reward = ( if ( assign-to_ones ) then ( sum_{ ?d : die } [ die-value_is_1( ?d ) ] ) else if ( assign-to_twos ) then ( 2 * ( sum_{ ?d : die } [ die-value_is_2( ?d ) ] ) ) else if ( assign-to_threes ) then ( 3 * ( sum_{ ?d : die } [ die-value_is_3( ?d ) ] ) ) else if ( assign-to_fours ) then ( 4 * ( sum_{ ?d : die } [ die-value_is_4( ?d ) ] ) ) else if ( assign-to_fives ) then ( 5 * ( sum_{ ?d : die } [ die-value_is_5( ?d ) ] ) ) else if ( assign-to_sixes ) then ( 6 * ( sum_{ ?d : die } [ die-value_is_6( ?d ) ] ) ) else if ( assign-to_reds ) then ( sum_{ ?d : die } [ ( die-color_is_red( ?d ) ) * ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) ] ) else if ( assign-to_greens ) then ( sum_{ ?d : die } [ ( die-color_is_green( ?d ) ) * ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) ] ) else if ( assign-to_blues ) then ( sum_{ ?d : die } [ ( die-color_is_blue( ?d ) ) * ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) ] ) else if ( assign-to_yellows ) then ( sum_{ ?d : die } [ ( die-color_is_yellow( ?d ) ) * ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) ] ) else if ( assign-to_purples ) then ( sum_{ ?d : die } [ ( die-color_is_purple( ?d ) ) * ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) ] ) else if ( assign-to_two-pairs & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d3 ~= ?d4 ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d2 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d2 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d2 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d2 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d2 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d2 ) ) ) ) & ( ( ( die-value_is_1( ?d3 ) & die-value_is_1( ?d4 ) ) | ( die-value_is_2( ?d3 ) & die-value_is_2( ?d4 ) ) | ( die-value_is_3( ?d3 ) & die-value_is_3( ?d4 ) ) | ( die-value_is_4( ?d3 ) & die-value_is_4( ?d4 ) ) | ( die-value_is_5( ?d3 ) & die-value_is_5( ?d4 ) ) | ( die-value_is_6( ?d3 ) & die-value_is_6( ?d4 ) ) ) ) ] ] ] ] ) ) then ( sum_{ ?d : die } [ ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ] ) else if ( assign-to_three-of-a-kind & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d2 ~= ?d3 ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d2 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d2 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d2 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d2 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d2 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d2 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d3 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d3 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d3 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d3 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d3 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d3 ) ) ) ) ] ] ] ) ) then ( sum_{ ?d : die } [ ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ] ) else if ( assign-to_four-of-a-kind & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d3 ~= ?d4 ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d2 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d2 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d2 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d2 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d2 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d2 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d3 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d3 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d3 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d3 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d3 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d3 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d4 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d4 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d4 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d4 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d4 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d4 ) ) ) ) ] ] ] ] ) ) then ( sum_{ ?d : die } [ ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ] ) else if ( assign-to_full-house & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [ exists_{ ?d5 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d1 ~= ?d5 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d2 ~= ?d5 ) &( ?d3 ~= ?d4 ) &( ?d3 ~= ?d5 ) &( ?d4 ~= ?d5 ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d2 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d2 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d2 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d2 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d2 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d2 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d3 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d3 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d3 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d3 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d3 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d3 ) ) ) ) & ( ( ( die-value_is_1( ?d4 ) & die-value_is_1( ?d5 ) ) | ( die-value_is_2( ?d4 ) & die-value_is_2( ?d5 ) ) | ( die-value_is_3( ?d4 ) & die-value_is_3( ?d5 ) ) | ( die-value_is_4( ?d4 ) & die-value_is_4( ?d5 ) ) | ( die-value_is_5( ?d4 ) & die-value_is_5( ?d5 ) ) | ( die-value_is_6( ?d4 ) & die-value_is_6( ?d5 ) ) ) ) ] ] ] ] ] ) ) then SCORE_FULL_HOUSE else if ( assign-to_small-straight & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d3 ~= ?d4 ) & ( ( ( die-value_is_1( ?d1 ) ) & ( die-value_is_2( ?d2 ) ) & ( die-value_is_3( ?d3 ) ) & ( die-value_is_4( ?d4 ) ) ) | ( ( die-value_is_2( ?d1 ) ) & ( die-value_is_3( ?d2 ) ) & ( die-value_is_4( ?d3 ) ) & ( die-value_is_5( ?d4 ) ) ) | ( ( die-value_is_3( ?d1 ) ) & ( die-value_is_4( ?d2 ) ) & ( die-value_is_5( ?d3 ) ) & ( die-value_is_6( ?d4 ) ) ) ) ] ] ] ] ) ) then SCORE_SMALL_STRAIGHT else if ( assign-to_large-straight & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [ exists_{ ?d5 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d1 ~= ?d5 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d2 ~= ?d5 ) &( ?d3 ~= ?d4 ) &( ?d3 ~= ?d5 ) &( ?d4 ~= ?d5 ) & ( ( ( die-value_is_1( ?d1 ) ) & ( die-value_is_2( ?d2 ) ) & ( die-value_is_3( ?d3 ) ) & ( die-value_is_4( ?d4 ) ) & ( die-value_is_5( ?d5 ) ) ) | ( ( die-value_is_2( ?d1 ) ) & ( die-value_is_3( ?d2 ) ) & ( die-value_is_4( ?d3 ) ) & ( die-value_is_5( ?d4 ) ) & ( die-value_is_6( ?d5 ) ) ) ) ] ] ] ] ] ) ) then SCORE_LARGE_STRAIGHT else if ( assign-to_chance ) then ( sum_{ ?d : die } [ ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ] ) else if ( assign-to_five-of-a-kind & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [ exists_{ ?d5 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d1 ~= ?d5 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d2 ~= ?d5 ) &( ?d3 ~= ?d4 ) &( ?d3 ~= ?d5 ) &( ?d4 ~= ?d5 ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d2 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d2 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d2 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d2 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d2 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d2 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d3 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d3 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d3 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d3 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d3 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d3 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d4 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d4 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d4 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d4 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d4 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d4 ) ) ) ) & ( ( ( die-value_is_1( ?d1 ) & die-value_is_1( ?d5 ) ) | ( die-value_is_2( ?d1 ) & die-value_is_2( ?d5 ) ) | ( die-value_is_3( ?d1 ) & die-value_is_3( ?d5 ) ) | ( die-value_is_4( ?d1 ) & die-value_is_4( ?d5 ) ) | ( die-value_is_5( ?d1 ) & die-value_is_5( ?d5 ) ) | ( die-value_is_6( ?d1 ) & die-value_is_6( ?d5 ) ) ) ) ] ] ] ] ] ) ) then SCORE_FIVE_OF_A_KIND else if ( assign-to_three-of-a-color & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d2 ~= ?d3 ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d2 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d3 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d3 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d3 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d3 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d3 ) ) ) ) ] ] ] ) ) then ( sum_{ ?d : die } [ ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) * ( exists_{ ?d2 : die } [ exists_{ ?d3 : die } [( ?d ~= ?d2 ) &( ?d ~= ?d3 ) &( ?d2 ~= ?d3 ) & ( ( ( die-color_is_red( ?d ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d ) & die-color_is_purple( ?d2 ) ) ) ) & ( ( ( die-color_is_red( ?d ) & die-color_is_red( ?d3 ) ) | ( die-color_is_green( ?d ) & die-color_is_green( ?d3 ) ) | ( die-color_is_blue( ?d ) & die-color_is_blue( ?d3 ) ) | ( die-color_is_yellow( ?d ) & die-color_is_yellow( ?d3 ) ) | ( die-color_is_purple( ?d ) & die-color_is_purple( ?d3 ) ) ) ) ] ] ) ] ) else if ( assign-to_four-of-a-color & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d3 ~= ?d4 ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d2 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d3 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d3 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d3 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d3 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d3 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d4 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d4 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d4 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d4 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d4 ) ) ) ) ] ] ] ] ) ) then ( sum_{ ?d : die } [ ( ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ) * ( exists_{ ?d2 : die } [( ?d ~= ?d2 ) & ( ( ( die-color_is_red( ?d ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d ) & die-color_is_purple( ?d2 ) ) ) ) ] ) ] ) else if ( assign-to_color-full-house & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [ exists_{ ?d5 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d1 ~= ?d5 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d2 ~= ?d5 ) &( ?d3 ~= ?d4 ) &( ?d3 ~= ?d5 ) &( ?d4 ~= ?d5 ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d2 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d3 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d3 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d3 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d3 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d3 ) ) ) ) & ( ( ( die-color_is_red( ?d4 ) & die-color_is_red( ?d5 ) ) | ( die-color_is_green( ?d4 ) & die-color_is_green( ?d5 ) ) | ( die-color_is_blue( ?d4 ) & die-color_is_blue( ?d5 ) ) | ( die-color_is_yellow( ?d4 ) & die-color_is_yellow( ?d5 ) ) | ( die-color_is_purple( ?d4 ) & die-color_is_purple( ?d5 ) ) ) ) ] ] ] ] ] ) ) then SCORE_COLOR_FULL_HOUSE else if ( assign-to_flush & ( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ exists_{ ?d3 : die } [ exists_{ ?d4 : die } [ exists_{ ?d5 : die } [( ?d1 ~= ?d2 ) &( ?d1 ~= ?d3 ) &( ?d1 ~= ?d4 ) &( ?d1 ~= ?d5 ) &( ?d2 ~= ?d3 ) &( ?d2 ~= ?d4 ) &( ?d2 ~= ?d5 ) &( ?d3 ~= ?d4 ) &( ?d3 ~= ?d5 ) &( ?d4 ~= ?d5 ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d2 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d3 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d3 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d3 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d3 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d3 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d4 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d4 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d4 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d4 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d4 ) ) ) ) & ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d5 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d5 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d5 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d5 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d5 ) ) ) ) ] ] ] ] ] ) ) then ( sum_{ ?d : die } [ ( 1 * ( die-value_is_1( ?d ) ) ) + ( 2 * ( die-value_is_2( ?d ) ) ) + ( 3 * ( die-value_is_3( ?d ) ) ) + ( 4 * ( die-value_is_4( ?d ) ) ) + ( 5 * ( die-value_is_5( ?d ) ) ) + ( 6 * ( die-value_is_6( ?d ) ) ) ] ) else if ( assign-to_rainbow & ( ~( exists_{ ?d1 : die } [ exists_{ ?d2 : die } [ ( ( ( die-color_is_red( ?d1 ) & die-color_is_red( ?d2 ) ) | ( die-color_is_green( ?d1 ) & die-color_is_green( ?d2 ) ) | ( die-color_is_blue( ?d1 ) & die-color_is_blue( ?d2 ) ) | ( die-color_is_yellow( ?d1 ) & die-color_is_yellow( ?d2 ) ) | ( die-color_is_purple( ?d1 ) & die-color_is_purple( ?d2 ) ) ) ) ] ] ) ) ) then SCORE_RAINBOW else 0 ) + ( if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_1 ) & receive-value-bonus ) then BONUS_VALUE_PART_1 else if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_2 ) & receive-value-bonus ) then BONUS_VALUE_PART_2 else if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_3 ) & receive-value-bonus ) then BONUS_VALUE_PART_3 else if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_4 ) & receive-value-bonus ) then BONUS_VALUE_PART_4 else if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_5 ) & receive-value-bonus ) then BONUS_VALUE_PART_5 else if ( ( current-phase_is_finish ) & ( bonus-level-value-part_is_6 ) & receive-value-bonus ) then BONUS_VALUE_PART_6 else 0 ) + ( if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_1 ) & receive-color-bonus ) then BONUS_COLOR_PART_1 else if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_2 ) & receive-color-bonus ) then BONUS_COLOR_PART_2 else if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_3 ) & receive-color-bonus ) then BONUS_COLOR_PART_3 else if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_4 ) & receive-color-bonus ) then BONUS_COLOR_PART_4 else if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_5 ) & receive-color-bonus ) then BONUS_COLOR_PART_5 else if ( ( current-phase_is_finish ) & ( bonus-level-color-part_is_6 ) & receive-color-bonus ) then BONUS_COLOR_PART_6 else 0 ) ;

    action-preconditions {
        assign-to_ones => ~taken_ones ;

        assign-to_twos => ~taken_twos ;

        assign-to_threes => ~taken_threes ;

        assign-to_fours => ~taken_fours ;

        assign-to_fives => ~taken_fives ;

        assign-to_sixes => ~taken_sixes ;

        assign-to_reds => ~taken_reds ;

        assign-to_greens => ~taken_greens ;

        assign-to_yellows => ~taken_yellows ;

        assign-to_blues => ~taken_blues ;

        assign-to_purples => ~taken_purples ;

        assign-to_two-pairs => ~taken_two-pairs ;

        assign-to_three-of-a-kind => ~taken_three-of-a-kind ;

        assign-to_four-of-a-kind => ~taken_four-of-a-kind ;

        assign-to_full-house => ~taken_full-house ;

        assign-to_small-straight => ~taken_small-straight ;

        assign-to_large-straight => ~taken_large-straight ;

        assign-to_chance => ~taken_chance ;

        assign-to_five-of-a-kind => ~taken_five-of-a-kind ;

        assign-to_three-of-a-color => ~taken_three-of-a-color ;

        assign-to_four-of-a-color => ~taken_four-of-a-color ;

        assign-to_color-full-house => ~taken_color-full-house ;

        assign-to_flush => ~taken_flush ;

        assign-to_rainbow => ~taken_rainbow ;

         ( ( ( assign-to_ones ) + ( assign-to_twos ) + ( assign-to_threes ) + ( assign-to_fours ) + ( assign-to_fives ) + ( assign-to_sixes ) + ( assign-to_reds ) + ( assign-to_greens ) + ( assign-to_yellows ) + ( assign-to_blues ) + ( assign-to_purples ) + ( assign-to_two-pairs ) + ( assign-to_three-of-a-kind ) + ( assign-to_four-of-a-kind ) + ( assign-to_full-house ) + ( assign-to_small-straight ) + ( assign-to_large-straight ) + ( assign-to_chance ) + ( assign-to_five-of-a-kind ) + ( assign-to_three-of-a-color ) + ( assign-to_four-of-a-color ) + ( assign-to_color-full-house ) + ( assign-to_flush ) + ( assign-to_rainbow ) ) ) <= 1;

         ( current-phase_is_assign ) => ( ( ( assign-to_ones ) | ( assign-to_twos ) | ( assign-to_threes ) | ( assign-to_fours ) | ( assign-to_fives ) | ( assign-to_sixes ) | ( assign-to_reds ) | ( assign-to_greens ) | ( assign-to_yellows ) | ( assign-to_blues ) | ( assign-to_purples ) | ( assign-to_two-pairs ) | ( assign-to_three-of-a-kind ) | ( assign-to_four-of-a-kind ) | ( assign-to_full-house ) | ( assign-to_small-straight ) | ( assign-to_large-straight ) | ( assign-to_chance ) | ( assign-to_five-of-a-kind ) | ( assign-to_three-of-a-color ) | ( assign-to_four-of-a-color ) | ( assign-to_color-full-house ) | ( assign-to_flush ) | ( assign-to_rainbow ) ) ) ;

         ( assign-to_ones => ( current-phase_is_assign ) ) ;

         ( assign-to_twos => ( current-phase_is_assign ) ) ;

         ( assign-to_threes => ( current-phase_is_assign ) ) ;

         ( assign-to_fours => ( current-phase_is_assign ) ) ;

         ( assign-to_fives => ( current-phase_is_assign ) ) ;

         ( assign-to_sixes => ( current-phase_is_assign ) ) ;

         ( assign-to_reds => ( current-phase_is_assign ) ) ;

         ( assign-to_greens => ( current-phase_is_assign ) ) ;

         ( assign-to_yellows => ( current-phase_is_assign ) ) ;

         ( assign-to_blues => ( current-phase_is_assign ) ) ;

         ( assign-to_purples => ( current-phase_is_assign ) ) ;

         ( assign-to_two-pairs => ( current-phase_is_assign ) ) ;

         ( assign-to_three-of-a-kind => ( current-phase_is_assign ) ) ;

         ( assign-to_four-of-a-kind => ( current-phase_is_assign ) ) ;

         ( assign-to_full-house => ( current-phase_is_assign ) ) ;

         ( assign-to_small-straight => ( current-phase_is_assign ) ) ;

         ( assign-to_large-straight => ( current-phase_is_assign ) ) ;

         ( assign-to_chance => ( current-phase_is_assign ) ) ;

         ( assign-to_five-of-a-kind => ( current-phase_is_assign ) ) ;

         ( assign-to_three-of-a-color => ( current-phase_is_assign ) ) ;

         ( assign-to_four-of-a-color => ( current-phase_is_assign ) ) ;

         ( assign-to_color-full-house => ( current-phase_is_assign ) ) ;

         ( assign-to_flush => ( current-phase_is_assign ) ) ;

         ( assign-to_rainbow => ( current-phase_is_assign ) ) ;

        forall_{ ?d : die } [ roll( ?d ) => ( ( ~current-phase_is_assign ) & ( ~current-phase_is_receive-boni ) & ( ~current-phase_is_finish ) ) ] ;

         ( current-phase_is_roll1 ) => ( forall_{ ?d : die } [ roll( ?d ) ] ) ;

    };

}
