////////////////////////////////////////////////////////////////////
// A simple binary version of the cell transition model (CTM) for 
// modeling traffic.  Based on the original CTM Tech Report and its 
// specification as a factored MDP in the following papers:
//
//   The Cell Transition Model: Network Traffic.  Daganzo; 
//   Tech Report Berkeley Institute of Transport Studies, 1994.
//
//   Efficient Solutions to Factored MDPs with Imprecise Transition 
//   Probabilities.  Delgado, Sanner, de Barros, Cozman; ICAPS, 2009.
//
// Because of the binary variable and no intermediate variable
// restrictions for the IPPC 2011, this model is quite simplified
// and ignores traffic aspects such as turns and turn probabilities.
//
// Note that this model uses concurrent actions, but that the number
// of total actions will only ever be 2^(# intersections).  Refer to
// the IPPC email list if you are unsure how to handle concurrent
// actions.
//
// Author: Scott Sanner (ssanner [at] gmail.com)
////////////////////////////////////////////////////////////////////
domain traffic_mdp {
  
	requirements = { 
		reward-deterministic, // this domain does not use a stochastic reward
		constrained-state,    // this domain uses state constraints
		concurrent            // this domain permits multiple non-default actions
	};

	types {
  		cell : object;
		intersection : object;
	};
 	
	pvariables { 

		// Specify which cells are perimeter input cells and their input rates
		PERIMETER-INPUT-CELL(cell) :  { non-fluent, bool, default = false };
		PERIMETER-INPUT-RATE(cell) :  { non-fluent, real, default = 1.0 };

		// Specify which cells are exit cells
		PERIMETER-EXIT-CELL(cell) :   { non-fluent, bool, default = false };

		// Specify which cells flow into other cells
		FLOWS-INTO-CELL(cell, cell) : { non-fluent, bool, default = false }; 

		// Specify which cells can pass into intersection on a signal phase
		FLOWS-INTO-INTERSECTION-NS(cell, intersection) : { non-fluent, bool, default = false }; 
		FLOWS-INTO-INTERSECTION-EW(cell, intersection) : { non-fluent, bool, default = false }; 

		// This is a simple boolean encoding of signal state for an intersection
		//
		// light-signal 1 2 -> effective light state
		// =========================================
		//              0 0 -> all red
		//              0 1 -> green for north-south traffic flow 
		//              1 1 -> all red
		//              1 0 -> green for east-west traffic flow
		light-signal1(intersection) : { state-fluent, bool, default = false };
		light-signal2(intersection) : { state-fluent, bool, default = false };

		// Binary cell transition model (CTM): cell is either occupied or not
		occupied(cell) : { state-fluent, bool, default = false };

		// Do we advance this signal for an intersection to its next sequence?
		advance(intersection) : { action-fluent, bool, default = false }; 
	};
  
	cpfs {
  
  		// Just use a finite state machine for the light-signals
  		// Note: a light signal that is red *must* advance to the next state...
  		//       there would be no reason to hold a red signal indefinitely. 
  		light-signal1'(?i) = 
  			if (advance(?i) | (light-signal1(?i) ^ light-signal2(?i)) | (~light-signal1(?i) ^ ~light-signal2(?i)))
 			then // Advance to next state (see table above)
  				KronDelta( light-signal2(?i) )
  			else // No change 
  				KronDelta( light-signal1(?i) );
 
  		light-signal2'(?i) = 
  			if (advance(?i) | (light-signal1(?i) ^ light-signal2(?i)) | (~light-signal1(?i) ^ ~light-signal2(?i)))
  			then // Advance to next state (see table above)
  				KronDelta( ~light-signal1(?i) )
  			else // No change 
  				KronDelta( light-signal2(?i) );
    
  		// Update a cell's occupation status according to CTM rules
  		occupied'(?c) = // Check for perimeter cell
  						if (PERIMETER-INPUT-CELL(?c))
  						then [if (~occupied(?c))
  								then Bernoulli(	PERIMETER-INPUT-RATE(?c) ) // Empty
  							else if (exists_{?c2 : cell} [FLOWS-INTO-CELL(?c, ?c2) ^ ~occupied(?c2)])
  								then KronDelta(	false ) // Vacated  
  							else KronDelta( true )] // Stopped
  							
  						// Check for cell entering intersection on green light
  						else if ([exists_{?i : intersection} [light-signal2(?i) ^ ~light-signal1(?i) ^ FLOWS-INTO-INTERSECTION-NS(?c,?i) ^ exists_{?c2 : cell} [FLOWS-INTO-CELL(?c, ?c2) ^ ~occupied(?c2)]]]
  		   						 | [exists_{?i : intersection} [light-signal1(?i) ^ ~light-signal2(?i) ^ FLOWS-INTO-INTERSECTION-EW(?c,?i) ^ exists_{?c2 : cell} [FLOWS-INTO-CELL(?c, ?c2) ^ ~occupied(?c2)]]])
						then [if (~occupied(?c))
  							then KronDelta( exists_{?c2 : cell} [FLOWS-INTO-CELL(?c2, ?c) ^ occupied(?c2)] )
  							else KronDelta( false )] // Vacated since cell enters intersection
								
						// Check for occupied cell entering intersection (if get here, must be red)
  						else if (exists_{?i : intersection} ((FLOWS-INTO-INTERSECTION-NS(?c,?i) | FLOWS-INTO-INTERSECTION-EW(?c,?i)) ^ occupied(?c))) 
  		   					then KronDelta( true ) // car stuck at red light
								
						// Check cells ?c that take traffic exiting an intersection
						else if ( exists_{?i : intersection, ?c2 : cell} (FLOWS-INTO-INTERSECTION-NS(?c2, ?i) | FLOWS-INTO-INTERSECTION-EW(?c2, ?i)) ^ FLOWS-INTO-CELL(?c2, ?c) )
						then [if (occupied(?c))
							// Can car go forward?
							then KronDelta( ~exists_{?c2 : cell} FLOWS-INTO-CELL(?c, ?c2) ^ ~occupied(?c2) ) 
							// Did a car enter from intersection?
							else KronDelta( 
								[exists_{?i : intersection} [light-signal2(?i) ^ ~light-signal1(?i) ^ exists_{?c2 : cell} [FLOWS-INTO-INTERSECTION-NS(?c2,?i) ^ FLOWS-INTO-CELL(?c2, ?c) ^ occupied(?c2)]]]
  		   						 | [exists_{?i : intersection} [light-signal1(?i) ^ ~light-signal2(?i) ^ exists_{?c2 : cell} [FLOWS-INTO-INTERSECTION-EW(?c2,?i) ^ FLOWS-INTO-CELL(?c2, ?c) ^ occupied(?c2)]]]
  		   					)] 
								
						// Must be a normal cell - normal transition rules apply
						else if (occupied(?c)) // Does it empty?
						then KronDelta ( ~PERIMETER-EXIT-CELL(?c) ^ ~exists_{?c2 : cell} [FLOWS-INTO-CELL(?c, ?c2) ^ ~occupied(?c2)])
						else // Does it fill?
  							KronDelta ( exists_{?c2 : cell} [FLOWS-INTO-CELL(?c2, ?c) ^ occupied(?c2)] );
  
	};

	// Minimize congestion: this reward penalizes congested traffic defined as pairs 
	// of *consecutive* occupied cells
	// Minimize congestion: this reward penalizes congested traffic defined as pairs 
	// of *consecutive* occupied cells
	reward = sum_{?c : cell} -[occupied(?c) ^ exists_{?c2 : cell} (FLOWS-INTO-CELL(?c2, ?c) ^ occupied(?c2))];
	
	action-preconditions{
		(sum_{?i : intersection} [ advance(?i) ]) <= 4;
	};

}


instance traffic_inst_mdp__06 {
	domain = traffic_mdp;
	objects {
		intersection : {ia5a5,ia5a10,ia10a5,ia10a10};
		cell : {ca5a1,ca1a5,ca5a2,ca2a5,ca5a3,ca3a5,ca5a4,ca4a5,ca5a6,ca6a5,ca5a7,ca7a5,ca5a8,ca8a5,ca5a9,ca9a5,ca5a11,ca11a5,ca5a12,ca12a5,ca5a13,ca13a5,ca5a14,ca14a5,ca10a1,ca1a10,ca10a2,ca2a10,ca10a3,ca3a10,ca10a4,ca4a10,ca10a6,ca6a10,ca10a7,ca7a10,ca10a8,ca8a10,ca10a9,ca9a10,ca10a11,ca11a10,ca10a12,ca12a10,ca10a13,ca13a10,ca10a14,ca14a10};
	};
	non-fluents {

		PERIMETER-INPUT-CELL(ca5a1);
		PERIMETER-INPUT-CELL(ca10a1);
		PERIMETER-INPUT-CELL(ca1a5);
		PERIMETER-INPUT-CELL(ca1a10);

		PERIMETER-INPUT-RATE(ca5a1) = 0.14510834;
		PERIMETER-INPUT-RATE(ca10a1) = 0.38991386;
		PERIMETER-INPUT-RATE(ca1a5) = 0.25346324;
		PERIMETER-INPUT-RATE(ca1a10) = 0.20154408;

		PERIMETER-EXIT-CELL(ca5a14);
		PERIMETER-EXIT-CELL(ca10a14);
		PERIMETER-EXIT-CELL(ca14a5);
		PERIMETER-EXIT-CELL(ca14a10);

		FLOWS-INTO-INTERSECTION-EW(ca5a4,ia5a5);
		FLOWS-INTO-INTERSECTION-EW(ca5a9,ia5a10);
		FLOWS-INTO-INTERSECTION-EW(ca10a4,ia10a5);
		FLOWS-INTO-INTERSECTION-EW(ca10a9,ia10a10);
		FLOWS-INTO-INTERSECTION-NS(ca4a5,ia5a5);
		FLOWS-INTO-INTERSECTION-NS(ca9a5,ia10a5);
		FLOWS-INTO-INTERSECTION-NS(ca4a10,ia5a10);
		FLOWS-INTO-INTERSECTION-NS(ca9a10,ia10a10);

		FLOWS-INTO-CELL(ca5a1,ca5a2);
		FLOWS-INTO-CELL(ca1a5,ca2a5);
		FLOWS-INTO-CELL(ca5a2,ca5a3);
		FLOWS-INTO-CELL(ca2a5,ca3a5);
		FLOWS-INTO-CELL(ca5a3,ca5a4);
		FLOWS-INTO-CELL(ca3a5,ca4a5);
		FLOWS-INTO-CELL(ca5a4,ca5a6);
		FLOWS-INTO-CELL(ca4a5,ca6a5);
		FLOWS-INTO-CELL(ca5a6,ca5a7);
		FLOWS-INTO-CELL(ca6a5,ca7a5);
		FLOWS-INTO-CELL(ca5a7,ca5a8);
		FLOWS-INTO-CELL(ca7a5,ca8a5);
		FLOWS-INTO-CELL(ca5a8,ca5a9);
		FLOWS-INTO-CELL(ca8a5,ca9a5);
		FLOWS-INTO-CELL(ca5a9,ca5a11);
		FLOWS-INTO-CELL(ca9a5,ca11a5);
		FLOWS-INTO-CELL(ca5a11,ca5a12);
		FLOWS-INTO-CELL(ca11a5,ca12a5);
		FLOWS-INTO-CELL(ca5a12,ca5a13);
		FLOWS-INTO-CELL(ca12a5,ca13a5);
		FLOWS-INTO-CELL(ca5a13,ca5a14);
		FLOWS-INTO-CELL(ca13a5,ca14a5);
		FLOWS-INTO-CELL(ca10a1,ca10a2);
		FLOWS-INTO-CELL(ca1a10,ca2a10);
		FLOWS-INTO-CELL(ca10a2,ca10a3);
		FLOWS-INTO-CELL(ca2a10,ca3a10);
		FLOWS-INTO-CELL(ca10a3,ca10a4);
		FLOWS-INTO-CELL(ca3a10,ca4a10);
		FLOWS-INTO-CELL(ca10a4,ca10a6);
		FLOWS-INTO-CELL(ca4a10,ca6a10);
		FLOWS-INTO-CELL(ca10a6,ca10a7);
		FLOWS-INTO-CELL(ca6a10,ca7a10);
		FLOWS-INTO-CELL(ca10a7,ca10a8);
		FLOWS-INTO-CELL(ca7a10,ca8a10);
		FLOWS-INTO-CELL(ca10a8,ca10a9);
		FLOWS-INTO-CELL(ca8a10,ca9a10);
		FLOWS-INTO-CELL(ca10a9,ca10a11);
		FLOWS-INTO-CELL(ca9a10,ca11a10);
		FLOWS-INTO-CELL(ca10a11,ca10a12);
		FLOWS-INTO-CELL(ca11a10,ca12a10);
		FLOWS-INTO-CELL(ca10a12,ca10a13);
		FLOWS-INTO-CELL(ca12a10,ca13a10);
		FLOWS-INTO-CELL(ca10a13,ca10a14);
		FLOWS-INTO-CELL(ca13a10,ca14a10);
	};
	init-state {
		occupied(ca1a5);
		occupied(ca5a2);
		occupied(ca5a3);
		occupied(ca5a4);
		occupied(ca11a5);
		occupied(ca5a12);
		occupied(ca5a13);
		occupied(ca5a14);
		occupied(ca2a10);
		occupied(ca10a3);
		occupied(ca4a10);
		occupied(ca10a7);
		occupied(ca7a10);
		occupied(ca8a10);
		occupied(ca10a9);
		occupied(ca12a10);
		occupied(ca14a10);
	};
	horizon  = 40;
	discount = 1.0;
}



