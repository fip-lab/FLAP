/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//                                                                             //
// RDDL MDP version of the IPC 2018 Academic Advising domain.                  //
//                                                                             //
//                                                                             //
// Created and modified for the probabilistic tracks of IPC 2014 by            //
//                                                                             //
//        Libby Ferland (libby.knouse [at] uky.edu) and                        //
//        Scott Sanner (ssanner [at] mie.utoronto.ca)                          //
//                                                                             //
// and modified for the probabilistic tracks of IPC 2018 by                    //
//        Thomas Keller (tho.keller [at] unibas.ch).                           //
//                                                                             //
//                                                                             //
// In this domain, a student may take courses at a given cost and passes the   //
// course with a probability determined by how many of the prerequisites they  //
// have successfully passed. A student also receives a penalty at each time    //
// step if they have not yet graduated from their program (i.e., completed all //
// required courses).  We allow multiple courses to be taken in a semester in  //
// some instances.                                                             //
//                                                                             //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

domain academic-advising_mdp {
    requirements { 
        reward-deterministic,
        preconditions
    };


    types {
        course : object;
    };


    pvariables {
        //////////////////// non-fluents ////////////////////
        
        // number of courses that can be taken in parallel, (introduced for IPC
        // 2018, replaces max-nondef-actions of IPC 2014 domain)
        COURSES_PER_SEMESTER              : { non-fluent, int, default = 1 };
        
        // first argument is a prerequisite of second argument
        PREREQ(course, course)            : { non-fluent, bool, default = false };

        // probability of passing a course without prerequisites
        PRIOR_PROB_PASS_NO_PREREQ(course) : { non-fluent, real, default = 0.8 };

        // base probability of passing a course with prerequisites (if no
        // prerequisite has been passed)
        PRIOR_PROB_PASS(course)           : { non-fluent, real, default = 0.2 };
    
        // program requirements for graduation
        PROGRAM_REQUIREMENT(course)       : { non-fluent, bool, default = false };
    
        // cost for taking a course the first time
        COURSE_COST                       : { non-fluent, real, default = -1 };

        // cost for taking a course except the first time
        COURSE_RETAKE_COST                : { non-fluent, real, default = -2 };

        // penalty per step for incomplete program
        PROGRAM_INCOMPLETE_PENALTY        : { non-fluent, real, default = -5 };


        //////////////////// state-fluents ////////////////////

        // course has been taken successfully
        passed(course)                    : { state-fluent, bool, default = false };

        // course has been taken at least once
        taken(course)                     : { state-fluent, bool, default = false };


        //////////////////// action-fluents ////////////////////

        // take a course
        take-course(course)               : { action-fluent, bool, default = false };
    };


    cpfs {
        passed'(?c) =
            // if ?c is taken and has no prerequisites, it's passed according to
            // a prior probability
            if ( take-course(?c) & ~( exists_{?c2 : course} [ PREREQ(?c2,?c) ] ) )
                then Bernoulli( PRIOR_PROB_PASS_NO_PREREQ(?c) )

            // if ?c is taken and has no prerequisites, it's passed according to
            // a prior probability and a bonus depending on passed prerequisites
            else if ( take-course(?c) )
                then Bernoulli( PRIOR_PROB_PASS(?c) +
                                ( (1 - PRIOR_PROB_PASS(?c) ) * ( sum_{?c2 : course} [ PREREQ(?c2,?c) & passed(?c2) ] ) /
								  (1 + sum_{?c2 : course} [ PREREQ(?c2,?c) ] ) ) )

            // otherwise, the value persists
            else passed(?c);


        // ?c is taken if it has been taken earlier or is taken now
        taken'(?c) = taken(?c) | take-course(?c);
    };


    reward =
        // taking a course for the first time incurs a cost
        ( sum_{ ?c : course } [ COURSE_COST * ( take-course(?c) & ~taken(?c) ) ] ) +
        
        // taking a course that has been taken before incurs a (usually higher) cost
        ( sum_{ ?c : course } [ COURSE_RETAKE_COST * ( take-course(?c) & taken(?c) ) ] ) +

        // as long as the program is not completed, a penalty is incurred
        ( PROGRAM_INCOMPLETE_PENALTY * ~( forall_{ ?c : course } [ PROGRAM_REQUIREMENT(?c) => passed(?c) ] ) );


    action-preconditions {
        // only take courses that haven't been passed
        ( forall_{ ?c : course } [ take-course(?c) => ~passed(?c) ] );

        // replaces max-nondef-actions
        ( ( sum_{ ?c : course } [take-course(?c)] ) <= COURSES_PER_SEMESTER );
    };
}     
 
    


  


/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//                                                                             //
// RDDL MDP version of Academic Advising instance #06 for IPC 2018 by Thomas   //
// Keller (tho.keller [at] unibas.ch), based on the IPC 2014 domain by Libby   //
// Ferland (libby.knouse [at] uky.edu).                                        //
//                                                                             //
//                                                                             //
// The naive policy that ignores all preconditions and takes courses that are  //
// program requirements until it succeeds is expected to complete the program  //
// after 27.00 steps with an expected reward of -135.00.                       //
//                                                                             //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

instance academic-advising_inst_mdp__06 {
    domain = academic-advising_mdp;
    objects {
       course : { c0000, c0001, c0002, c0003, c0004, c0005, c0006, c0100, c0101, c0102, c0103, c0104, c0105, c0200, c0201, c0202, c0203, c0204, c0300, c0301, c0302, c0303, c0304, c0400, c0401, c0402, c0403, c0500, c0501, c0502 };
    };

    non-fluents {
        COURSES_PER_SEMESTER = 1;

        // PRIOR PROBS
        PRIOR_PROB_PASS_NO_PREREQ(c0000) = 0.73;
        PRIOR_PROB_PASS_NO_PREREQ(c0001) = 0.68;
        PRIOR_PROB_PASS_NO_PREREQ(c0002) = 0.84;
        PRIOR_PROB_PASS_NO_PREREQ(c0003) = 0.90;
        PRIOR_PROB_PASS_NO_PREREQ(c0004) = 0.63;
        PRIOR_PROB_PASS_NO_PREREQ(c0005) = 0.66;
        PRIOR_PROB_PASS_NO_PREREQ(c0006) = 0.58;
        PRIOR_PROB_PASS(c0100) = 0.11;
        PRIOR_PROB_PASS(c0101) = 0.27;
        PRIOR_PROB_PASS(c0102) = 0.08;
        PRIOR_PROB_PASS(c0103) = 0.10;
        PRIOR_PROB_PASS(c0104) = 0.25;
        PRIOR_PROB_PASS(c0105) = 0.30;
        PRIOR_PROB_PASS(c0200) = 0.18;
        PRIOR_PROB_PASS(c0201) = 0.36;
        PRIOR_PROB_PASS(c0202) = 0.26;
        PRIOR_PROB_PASS(c0203) = 0.43;
        PRIOR_PROB_PASS(c0204) = 0.30;
        PRIOR_PROB_PASS(c0300) = 0.11;
        PRIOR_PROB_PASS(c0301) = 0.33;
        PRIOR_PROB_PASS(c0302) = 0.22;
        PRIOR_PROB_PASS(c0303) = 0.20;
        PRIOR_PROB_PASS(c0304) = 0.39;
        PRIOR_PROB_PASS(c0400) = 0.06;
        PRIOR_PROB_PASS(c0401) = 0.06;
        PRIOR_PROB_PASS(c0402) = 0.11;
        PRIOR_PROB_PASS(c0403) = 0.35;
        PRIOR_PROB_PASS(c0500) = 0.08;
        PRIOR_PROB_PASS(c0501) = 0.35;
        PRIOR_PROB_PASS(c0502) = 0.34;

        // PREREQ
        PREREQ(c0003, c0100);
        PREREQ(c0001, c0100);
        PREREQ(c0000, c0101);
        PREREQ(c0003, c0101);
        PREREQ(c0004, c0102);
        PREREQ(c0006, c0102);
        PREREQ(c0005, c0102);
        PREREQ(c0002, c0103);
        PREREQ(c0004, c0103);
        PREREQ(c0006, c0104);
        PREREQ(c0003, c0104);
        PREREQ(c0001, c0105);
        PREREQ(c0003, c0105);
        PREREQ(c0006, c0200);
        PREREQ(c0101, c0200);
        PREREQ(c0004, c0201);
        PREREQ(c0102, c0201);
        PREREQ(c0002, c0202);
        PREREQ(c0105, c0203);
        PREREQ(c0101, c0204);
        PREREQ(c0002, c0204);
        PREREQ(c0101, c0300);
        PREREQ(c0100, c0301);
        PREREQ(c0102, c0302);
        PREREQ(c0103, c0302);
        PREREQ(c0203, c0303);
        PREREQ(c0204, c0303);
        PREREQ(c0105, c0304);
        PREREQ(c0105, c0304);
        PREREQ(c0204, c0400);
        PREREQ(c0100, c0400);
        PREREQ(c0301, c0401);
        PREREQ(c0303, c0402);
        PREREQ(c0101, c0402);
        PREREQ(c0302, c0403);
        PREREQ(c0204, c0403);
        PREREQ(c0402, c0500);
        PREREQ(c0304, c0500);
        PREREQ(c0103, c0501);
        PREREQ(c0400, c0501);
        PREREQ(c0402, c0502);

        // PROGRAM REQUIREMENT
        PROGRAM_REQUIREMENT(c0501);
        PROGRAM_REQUIREMENT(c0500);
        PROGRAM_REQUIREMENT(c0304);
        PROGRAM_REQUIREMENT(c0303);
        PROGRAM_REQUIREMENT(c0000);
        PROGRAM_REQUIREMENT(c0001);
        PROGRAM_REQUIREMENT(c0003);

        // COURSE COSTS
        COURSE_COST = 0;
        COURSE_RETAKE_COST = 0;

    };

    init-state {
        ~passed(c0000);
    };

    horizon  = 30;

    discount = 1.0;
}

